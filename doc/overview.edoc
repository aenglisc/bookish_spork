@title Bookish spork

@copyright {@years} Alexey Nikitin

@version {@version}

@author Alexey Nikitin <tank@bohr.su>
  [https://twitter.com/tank_bohr]

@doc

<svg width="152" height="175" viewBox="0 0 605 750">
  <defs>
    <style>
      .with-gradient {
        fill:url(#linear-gradient);
      }
    </style>
    <linearGradient id="linear-gradient" x1="302" y1="750" x2="302" gradientUnits="userSpaceOnUse">
      <stop offset="0" stop-color="#237d26"/>
      <stop offset="1" stop-color="#cce70b"/>
    </linearGradient>
  </defs>
  <path class="with-gradient" d="M464.83,68.37c-12-13.05-33.4-1-28.57,16l23.92,84.38c5.67,20,.64,39.9-20.16,39.9-16.72,0-27.43-10-31.31-29.83L380.07,21.52A22.41,22.41,0,0,0,367.13,2.29l-.43-.2a22.4,22.4,0,0,0-31.8,19.41l4.87,151.35a37.31,37.31,0,0,1-74.56,0L270.09,21.5a22.4,22.4,0,0,0-31.8-19.41l-.43.2a22.41,22.41,0,0,0-12.93,19.23L196.28,178.83c-3.88,19.87-14.59,29.83-31.31,29.83h0c-20.8,0-25.83-19.89-20.16-39.9l23.92-84.38c4.83-17-16.59-29.07-28.57-16C55.9,160.27,0,312.82,0,447.36c0,167.06,135.43,302.5,302.49,302.51h0C469.57,749.86,605,614.43,605,447.36,605,312.82,549.1,160.27,464.83,68.37Zm-1.46,545.11A227.5,227.5,0,0,1,75,452.61a10,10,0,0,1,20,0,207.5,207.5,0,1,0,415,0,10,10,0,0,1,20,0A226,226,0,0,1,463.37,613.48Z"/>
</svg>

An erlang library to test http requests. Inspired by Ruby's <a target="_blank" href="https://github.com/bblimke/webmock">WebMock</a>.

Suitable for Elixir.

<a target="_blank" href="https://travis-ci.org/tank-bohr/bookish_spork">
  <img alt="Build Status" src="https://travis-ci.org/tank-bohr/bookish_spork.svg?branch=master"/>
</a>
<a target="_blank" href="https://coveralls.io/github/tank-bohr/bookish_spork?branch=master">
  <img alt="Coverage Status"
       src="https://coveralls.io/repos/github/tank-bohr/bookish_spork/badge.svg?branch=master"
  />
</a>
<a target="_blank" href="https://hex.pm/packages/bookish_spork">
  <img alt="Hex.pm" src="https://img.shields.io/hexpm/v/bookish_spork.svg"/>
</a>
<a target="_blank" href="https://gitter.im/bookish_spork">
  <img alt="Gitter" src="https://badges.gitter.im/join.svg"/>
</a>

== Rationale ==

There are several ways to test your http interaction

<ul>
  <li>Real http request to real servers: not very reliable, requires internet</li>
  <li>You can use external http server like [https://httpbin.org/] (hackney approach)</li>
  <li>You can mock your http client library</li>
  <li>Also you can run an http-server within your application on your localhost on a particualr port</li>
</ul>

The last approach is the best IMHO. It is absolutely http-client agnostic. It doesn't require internet connection or any external utilities.

bookish_spork provides you facilities to test your requests with <strong>real</strong> http server.

== Usage ==

Bookish spork supports Erlang/OTP 20.3 or later.

First step: add to your rebar config

<pre lang="erlang">
{profiles, [
    {test, [
        {deps, [
            {bookish_spork, "{@version}"}
        ]}
    ]}
]}.</pre>


Second: start server in your tests.

<pre lang="erlang">
bookish_spork:start_server().
</pre>


It starts process without link. Thus you can use it in `init_per_group' and in `init_per_suite' callbacks. Default port is 32002 but you can specify any port you like with `bookish_spork:start_server/1'


=== Stub request ===


The simplest stub you can do is

<pre lang="erlang">
bookish_spork:stub_request().
</pre>

It will stub your requests with `204 No Content' response with empty body.

If you need specify response you easily can do this:


<pre lang="erlang">
bookish_spork:stub_request([Status, Headers, Content]).
</pre>


=== Capture request ===


As usual the main goal is to test that you send the correct request


<pre lang="erlang">
{ok, Request} = bookish_spork:capture_request().
</pre>

It returns you an opaque structure of the request. You can inspect it with

<ul>
  <li>{@link bookish_spork_request:method/1}</li>
  <li>{@link bookish_spork_request:uri/1}</li>
  <li>{@link bookish_spork_request:headers/1}</li>
  <li>{@link bookish_spork_request:body/1}</li>
</ul>

=== Bypass comparision ===

An elixir library <a target="_blank" href="https://github.com/PSPDFKit-labs/bypass">bypass</a> does pretty much the same. And illustrates the same approach. It starts a cowboy web-server to replace a real service for test

But bookish_spork has some advantages:

<ul>

  <li>Bypass depends on `cowboy' and `plug'. Bookish spork has zero dependencies</li>

  <li>Bookish spork works seamlessly with both erlang and elixir. Bypass is supposed to be an elixir only library</li>

  <li>Bookish spork much simpler (I believe)</li>

</ul>

=== Examples ===

Setup and teardown

<pre lang="erlang">
init_per_group(_GroupName, Config) ->
    {ok, _} = bookish_spork:start_server(),
    Config.

end_per_group(_GroupName, _Config) ->
    ok = bookish_spork:stop_server().
</pre>

Set expectation

<pre lang="erlang"><![CDATA[init_per_testcase(random_test, Config) ->
    bookish_spork:stub_request([200, #{}
        <<"{\"value\": \"Chuck Norris' favourite word: chunk.\"}">>]),
    Config.]]>
</pre>

Make assertions

<pre lang="erlang"><![CDATA[random_test(_Config) ->
    ?assertEqual(<<"Chuck Norris' favourite word: chunk.">>, testee:make_request()),
    {ok, Request} = bookish_spork:capture_request(),
    ?ssertEqual("/jokes/random", bookish_spork_request:uri(Request)).]]>
</pre>

As you can see there are two types of assertions:

<ul>
  <li>we check a testee function result</li>
  <li>we check a side effect: verifying outgoing request has correct attributes (uri in this case)</li>
</ul>

==== More complex expectations ====

There are cases when the testee function initiates more than one request. But if you know the order of your requests, you can set several expectations

<pre lang="erlang"><![CDATA[bookish_spork:stub_request([200, #{}, <<"{\"value\": \"The first response\"}">>]),
bookish_spork:stub_request([200, #{}, <<"{\"value\": \"The second response\"}">>]).]]>
</pre>

The library will response in the order the stubs were defined.


Sometimes you can't guarantee the order of requests. Then you may stub request with the fun

<pre lang="erlang"><![CDATA[bookish_spork:stub_request(fun(Request) ->
    case bookish_spork_request:uri(Request) of
        "/bookish/spork" ->
            [200, #{}, <<"Hello">>];
        "/admin/sporks" ->
            [403, #{}, <<"It is not possible here">>]
    end
end)]]>
</pre>

{@link bookish_spork_request. Module to work with request}

{@link bookish_spork_response. Module to work with response}


==== Stub multiple requests with one response ====

It can be usefull to stub several requests with one command

<pre lang="erlang"><![CDATA[
bookish_spork:stub_request([200, #{<<"Content-Type" => "text/plan">>}, <<"Pants">>], _Times = 20)
]]></pre>

The same with the `fun'

<pre lang="erlang"><![CDATA[
bookish_spork:stub_request(fun(Req) ->
    Body = bookish_spork_request:body(Req),
    [200, #{<<"X-Respond-With">> => <<"echo">>}, Body]
end, _Times = 150)
]]></pre>

As you can see that it's not necessary to build response structure yourself. You can use handy <a target="_blank" href="https://github.com/tank-bohr/bookish_spork/issues/32">three-element tuple or list syntax</a> to define the response. But the {@link bookish_spork_response:new/1} still works.

==== Elixir example ====

<pre lang="elixir">
defmodule ChuckNorrisApiTest do
  use ExUnit.Case
  doctest ChuckNorrisApi

  setup_all do
    {:ok, _} = :bookish_spork.start_server
    {:ok, %{}}
  end

  test "retrieves a random joke" do
    :bookish_spork.stub_request([200, %{}, "{
      \"value\": \"Chuck norris tried to crank that soulja boy but it wouldn't crank up\"
    }"])
    assert ChuckNorrisApi.random == "Chuck norris tried to crank that soulja boy but it wouldn't crank up"

    {:ok, request} = :bookish_spork.capture_request
    assert :bookish_spork_request.uri(request) == '/jokes/random'
  end
end
</pre>

For more details see examples dir.

@end
